package main

import (
	"errors"
	"net/http"

	"github.com/gin-gonic/gin"
)

type Todo struct {
	ID        string `json:"id"`
	Item      string `json:"item"`
	Completed bool   `json:"completed"`
}

var todos = []Todo{
	{ID: "1", Item: "Buy groceries", Completed: false},
	{ID: "2", Item: "Finish homework", Completed: false},
	{ID: "3", Item: "Go to the gym", Completed: false},
	{ID: "4", Item: "Read a book", Completed: false},
	{ID: "5", Item: "Call mom", Completed: false},
}

func getTodos(context *gin.Context) {
	context.IndentedJSON(http.StatusOK, todos)
}

func addTodo(context *gin.Context) {
	var newTodo Todo
	if err := context.BindJSON(&newTodo); err != nil {
		return
	}
	todos = append(todos, newTodo)
	context.IndentedJSON(http.StatusCreated, newTodo)

}

func updateTodo(context *gin.Context) {
	id := context.Param("id")
	var bodyTodo Todo
	if err := context.BindJSON(&bodyTodo); err != nil {
		return
	}
	updatedTodo, err := updateTodoById(id, bodyTodo)
	if err != nil {
		context.IndentedJSON(http.StatusNotFound, gin.H{"message": "this specific todo was not found"})
	}
	context.IndentedJSON(http.StatusCreated, updatedTodo)

}

func updateTodoById(id string, todo Todo) (*Todo, error) {

	for i, t := range todos {
		if t.ID == id {
			todos[i] = todo
			return &todos[i], nil
		}
	}
	return nil, errors.New("todo not found")
}

func completeTodo(context *gin.Context) {
	id := context.Param("id")

	completedTodo, err := completeTodoById(id)
	if err != nil {
		context.IndentedJSON(http.StatusNotFound, gin.H{"message": "this specific todo was not found"})
	}
	context.IndentedJSON(http.StatusCreated, completedTodo)

}

func completeTodoById(id string) (*Todo, error) {

	for i, t := range todos {
		if t.ID == id {
			todos[i].Completed = true
			return &todos[i], nil
		}
	}
	return nil, errors.New("todo not found")
}

func getSingleTodo(context *gin.Context) {
	id := context.Param("id")
	singleTodo, err := getTodoById(id)
	if err != nil {
		context.IndentedJSON(http.StatusNotFound, gin.H{"message": "this specific todo was not found"})
	}
	context.IndentedJSON(http.StatusOK, singleTodo)
}

func getTodoById(id string) (*Todo, error) {

	for i, t := range todos {
		if t.ID == id {
			return &todos[i], nil
		}
	}
	return nil, errors.New("todo not found")
}

func deleteTodo(context *gin.Context) {
	id := context.Param("id")

	indexDeletedTodo, err := getIndexTodoById(id)
	if err != nil {
		context.IndentedJSON(http.StatusNotFound, gin.H{"message": "this specific todo was not found"})
	}

	todos = append(todos[:indexDeletedTodo], todos[indexDeletedTodo+1:]...)

	context.IndentedJSON(http.StatusOK, gin.H{"message": "todo hass been deleted successfully!!"})

}

func getIndexTodoById(id string) (int, error) {

	for i, t := range todos {
		if t.ID == id {
			return i, nil
		}
	}
	return -1, errors.New("todo not found")

}

func main() {
	router := gin.Default()
	router.GET("/todos", getTodos)
	router.GET("/todos/:id", getSingleTodo)
	router.PUT("/todos/:id", updateTodo)
	router.PUT("/todos/:id/complete", completeTodo)
	router.DELETE("/todos/:id", deleteTodo)
	router.POST("/todos", addTodo)
	router.Run("localhost:8085")
}
